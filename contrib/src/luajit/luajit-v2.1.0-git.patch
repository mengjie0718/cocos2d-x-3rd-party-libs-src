diff --git a/src/Makefile b/src/Makefile
index 2538503f..fba20e51 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -327,7 +327,7 @@ ifeq (Darwin,$(TARGET_SYS))
 else
 ifeq (iOS,$(TARGET_SYS))
   TARGET_STRIP+= -x
-  TARGET_XSHLDFLAGS= -dynamiclib -single_module -undefined dynamic_lookup -fPIC
+  TARGET_XSHLDFLAGS= -dynamiclib -single_module -fPIC
   TARGET_DYNXLDOPTS=
   TARGET_XSHLDFLAGS+= -install_name $(TARGET_DYLIBPATH) -compatibility_version $(MAJVER).$(MINVER) -current_version $(MAJVER).$(MINVER).$(RELVER)
   ifeq (arm64,$(TARGET_LJARCH))
diff --git a/src/lj_meta.c b/src/lj_meta.c
index 660dfec0..f70250ab 100644
--- a/src/lj_meta.c
+++ b/src/lj_meta.c
@@ -419,6 +419,29 @@ TValue *lj_meta_comp(lua_State *L, cTValue *o1, cTValue *o2, int op)
     }
   } else if (tvisbool(o1) && tvisbool(o2)) {
     goto trymt;
+  }else if (tvislightud(o1) || tvislightud(o2)) {
+    int64_t res = 0;
+    if( tvisnumber(o1)){
+      lua_Number o1v = numV(o1);
+#if LJ_64
+      int64_t o2v = (int64_t) lightudV(G(L),o2); 
+#else
+      int64_t o2v = *((int64_t *) lightudV(G(L),o2)); 
+#endif  
+      res = o1v - o2v;
+      return (TValue *)(intptr_t)(((op&2) ? res <= 0 : res < 0) ^ (op&1));
+    }else if(tvisnumber(o2)){
+#if LJ_64
+      int64_t o1v = (int64_t) lightudV(G(L),o1);
+#else
+      int64_t o1v = *((int64_t *) lightudV(G(L),o1));
+#endif
+      lua_Number o2v =  numV(o2);
+      res = o1v - o2v;
+      return (TValue *)(intptr_t)(((op&2) ? res <= 0 : res < 0) ^ (op&1));
+    }else{
+      goto err;
+    }
   } else {
   err:
     lj_err_comp(L, o1, o2);
diff --git a/src/lj_strfmt_num.c b/src/lj_strfmt_num.c
index dfd56bd4..e0d27f51 100644
--- a/src/lj_strfmt_num.c
+++ b/src/lj_strfmt_num.c
@@ -576,6 +576,9 @@ static char *lj_strfmt_wfnum(SBuf *sb, SFormat sf, lua_Number n, char *p)
 /* Add formatted floating-point number to buffer. */
 SBuf *lj_strfmt_putfnum(SBuf *sb, SFormat sf, lua_Number n)
 {
+  if(n == (int64_t) n){
+    sf=(STRFMT_NUM|STRFMT_T_FP_G | (1 << STRFMT_SH_PREC))^STRFMT_T_FP_E;
+  }
   sb->w = lj_strfmt_wfnum(sb, sf, n, NULL);
   return sb;
 }
@@ -586,7 +589,13 @@ SBuf *lj_strfmt_putfnum(SBuf *sb, SFormat sf, lua_Number n)
 GCstr * LJ_FASTCALL lj_strfmt_num(lua_State *L, cTValue *o)
 {
   char buf[STRFMT_MAXBUF_NUM];
-  MSize len = (MSize)(lj_strfmt_wfnum(NULL, STRFMT_G14, o->n, buf) - buf);
+  SFormat sf=STRFMT_NUM;
+  if(o->n == (int64_t) o->n){
+    sf=(STRFMT_NUM|STRFMT_T_FP_G | (1 << STRFMT_SH_PREC))^STRFMT_T_FP_E;
+  }else{
+    sf=STRFMT_G14;
+  }
+  MSize len = (MSize)(lj_strfmt_wfnum(NULL, sf, o->n, buf) - buf);
   return lj_str_new(L, buf, len);
 }
 
diff --git a/src/luaconf.h b/src/luaconf.h
index 5ba6eda9..581b7afd 100644
--- a/src/luaconf.h
+++ b/src/luaconf.h
@@ -102,7 +102,7 @@
 
 /* Note: changing the following defines breaks the Lua 5.1 ABI. */
 #define LUA_INTEGER	ptrdiff_t
-#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
+#define LUA_IDSIZE	512	/* Size of lua_Debug.short_src. */
 /*
 ** Size of lauxlib and io.* on-stack buffers. Weird workaround to avoid using
 ** unreasonable amounts of stack space, but still retain ABI compatibility.
